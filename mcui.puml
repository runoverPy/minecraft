@startuml
class game.assets.mcui.asset.TextField {
- StringBuffer text
- Vector4f color
- boolean isShaded
+ String getText()
+ StringBuffer getTextBuffer()
+ void setTextBuffer(StringBuffer)
+ void render(Matrix4f,int,int)
- void drawLine(Matrix4f,String,Vector4f)
}
class game.assets.mcui.asset.TextField.Symbol {
- char c
- Vector4f glyphColor
- ProportionalFont.Glyph g
}
interface game.assets.mcui.event.EventTarget {
}
class game.assets.mcui.Button {
- Runnable onClick
}
class game.assets.mcui.event.ClickEvent {
}
class game.assets.mcui.asset.ImageFrame {
- {static} float[] tileVertices
- {static} int vertices
- Image image
- int texture
+ void render(Matrix4f,int,int)
}
class game.assets.mcui.event.KeyEvent {
+ int key
}
class game.assets.mcui.event.EventGenerator {
- GLFWKeyCallbackI keyCallback
- GLFWCharCallbackI charCallback
- GLFWMouseButtonCallbackI mouseButtonCallback
- GLFWCursorPosCallbackI cursorPosCallback
}
class game.assets.mcui.UnsafeContainer {
+ void render(Matrix4f,int,int)
}
abstract class game.assets.mcui.PixelComponent {
# {static} ItemScale scale
+ int getWidth()
+ int getHeight()
+ int getAbsWidth()
+ int getAbsHeight()
+ {static} void setScale(ItemScale)
+ {static} ItemScale getScale()
# int getPxScale()
}
abstract class game.assets.mcui.Container {
# List<Component> children
+ void append(Component)
+ void remove(Component)
}
class game.assets.mcui.ContentRoot {
- Component root
+ void render()
+ Component pick(double,double)
}
abstract class game.assets.mcui.AbstractButton {
# {static} Supplier<Boolean> TRUE
# Supplier<Boolean> isActive
- ColorFrame buttonCover
- ColorFrame buttonFrame
- ImageFrame buttonImage
- TextField description
# {static} Image filler
+ boolean isActive()
+ void render(Matrix4f,int,int)
# void onResize(int,int)
# int minWidth()
# int minHeight()
+ boolean isHovering(int,int)
}
class game.assets.mcui.asset.ColorFrame {
- {static} float[] tileVertices
# {static} int vertices
- Vector4f boxColor
+ Vector4f getBoxColor()
+ void setBoxColor(Vector4f)
+ void render(Matrix4f,int,int)
}
class game.assets.mcui.TableContainer {
- int rows
+ boolean insert(int,int,int,int,Component)
+ void render(Matrix4f,int,int)
}
class game.assets.mcui.event.MouseEvent {
+ {static} EventType<MouseEvent> ANY
+ {static} EventType<MouseEvent> MOUSE_PRESSED
+ {static} EventType<MouseEvent> MOUSE_RELEASED
- int button
}
class game.assets.mcui.InputField {
- ColorFrame inputFrame
- ColorFrame inputField
- TextField inputText
- StringBuffer contents
- boolean isSelected
- TimedKeyInput backspace
- GLFWCharCallbackI charCallback
# void onResize(int,int)
+ String toString()
+ StringBuffer getContents()
+ void render(Matrix4f,int,int)
- void toggleSelect()
}
class game.assets.mcui.InputField.TimedKeyInput {
- {static} long initialDelay
- {static} long subsequentDelay
- int key
- boolean isTriggered
- long lastTrigger
- int triggerCount
+ boolean check()
+ void accept(KeyEvent)
}
enum game.assets.mcui.ItemScale {
+  SMALL
+  MEDIUM
+  LARGE
+  GIANT
- int pixels
+ int getPixels()
}
abstract class game.assets.mcui.event.Event {
+ {static} EventType<Event> ANY
- EventType<? extends Event> eventType
+ void capture()
}
class game.assets.mcui.LinearContainer {
+ void render(Matrix4f,int,int)
}
class game.assets.mcui.event.MouseHandler {
- ContentRoot contentRoot
- EventTarget currentEventTarget
- MouseEvent lastEvent
- boolean hover
+ void handleMouseClickEvent(int,int,int)
+ void handleMouseEnterEvent()
- void process(MouseEvent,EventTarget)
}
abstract class game.assets.mcui.Component {
- int width
- boolean resizeable
+ int getWidth()
+ int getHeight()
+ boolean setWidth(int)
+ boolean setHeight(int)
+ boolean setDimensions(int,int)
+ void setResizeable(boolean)
+ boolean isResizeable()
+ {abstract}void render(Matrix4f,int,int)
# void onResize(int,int)
# void onMove(int,int)
# int minWidth()
# int maxWidth()
# int minHeight()
# int maxHeight()
+ boolean contains(double,double)
+ Component pick(double,double)
}
class game.assets.mcui.event.EventType {
+ {static} EventType<Event> ROOT
- Set<EventType<? extends E>> subtypes
- EventType<? super E> supertype
- String name
- void register(EventType<? extends E>)
+ EventType<? super E>[] getTypeHierarchy()
- EventType<? super E>[] getTypeHierarchy(int)
+ String getName()
+ EventType<? super E> getSupertype()
+ String toString()
}


game.assets.mcui.PixelComponent <|-- game.assets.mcui.asset.TextField
game.assets.mcui.asset.TextField +.. game.assets.mcui.asset.TextField.Symbol
game.assets.mcui.AbstractButton <|-- game.assets.mcui.Button
game.assets.mcui.event.Event <|-- game.assets.mcui.event.ClickEvent
game.assets.mcui.PixelComponent <|-- game.assets.mcui.asset.ImageFrame
game.assets.mcui.event.Event <|-- game.assets.mcui.event.KeyEvent
game.assets.mcui.Container <|-- game.assets.mcui.UnsafeContainer
game.assets.mcui.Component <|-- game.assets.mcui.PixelComponent
game.assets.mcui.Component <|-- game.assets.mcui.Container
game.assets.mcui.PixelComponent <|-- game.assets.mcui.AbstractButton
game.assets.mcui.PixelComponent <|-- game.assets.mcui.asset.ColorFrame
game.assets.mcui.PixelComponent <|-- game.assets.mcui.TableContainer
game.assets.mcui.event.Event <|-- game.assets.mcui.event.MouseEvent
game.assets.mcui.PixelComponent <|-- game.assets.mcui.InputField
game.assets.mcui.InputField +.. game.assets.mcui.InputField.TimedKeyInput
game.assets.mcui.Consumer <|.. game.assets.mcui.InputField.TimedKeyInput
game.assets.mcui.Container <|-- game.assets.mcui.LinearContainer
game.assets.mcui.event.EventTarget <|.. game.assets.mcui.Component
@enduml